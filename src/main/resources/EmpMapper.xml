<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.tedu.dao.EmpMapper">
    <!--    在mapper根据标签内部可以添加很多SQL标签
              select 存放查询类型的SQL语句
              insert,delete,update 存放增删改类型的SQL语句-->
    <!--    练习1,查询epm表中的所有员工信息
               resultType用于指定使用什么类型来封装SQL语句查询的结果
               如果查询员工信息,可以指定用Emp对象来进行封装
               因此ResultType需要指向Emp类的全限定类名-->


    <!-- 在mapper根据标签内部可以添加很多的SQL标签
     select：存放查询类型的SQL语句
     insert、delete、update:存放增/删/改类型的SQL语句
     -->
    <!-- .练习1：查询emp表中的所有员工信息
            resultType：用于指定使用什么类型来封装SQL语句查询的结果
     -->

    <select id="findAll" resultType="cn.tedu.pojo.Emp">
        select * from emp
    </select>

    <!--    练习2,新增
            resultType只用在select标签上,指定使用什么类型封装查询的结果
            增删改操作,返回值都是统一的int类型,不用指定resultType-->
    <insert id="insert02">
        insert into emp value(null,"赵云","保安",6000)
    </insert>

    <insert id="Update03">
        update emp set job='保镖', salary=20000
        where name='赵云'

    </insert>

    <!--    #{id}相当于JDBC中的问号占位符-->
    <select id="findById05" resultType="cn.tedu.pojo.Emp">
        select * from emp where id=#{id}
    </select>

    <insert id="insert06">
        insert into emp value(null,#{name},#{job},#{salary})
    </insert>

    <update id="update07">
        update emp set name=#{name},job=#{job}, salary=#{salary} where id=#{id}
    </update>

    <delete id="deleteById08">
        delete from emp where id=#{id}
    </delete>

    <select id="findAll09" resultType="cn.tedu.pojo.Emp">
        select ${colName} from emp
    </select>

    <select id="findByName10" resultType="cn.tedu.pojo.Emp">
        select * from emp where name like '%${name}%'
    </select>

    <select id="findByName11" resultType="cn.tedu.pojo.Emp">
        select * from emp where name like #{name}
    </select>
    <!--    //    练习12: 根据薪资查询员工信息-->
    <!--    // 如果没有参数, 则不执行where子句, 默认查询所有员工：-->
    <!--    //       select * from emp-->
    <!--    // 如果参数中只有minSal(即minSal不为null), 则：-->
    <!--    //       ... where salary > minSal-->
    <!--    // 如果参数中只有maxSal(即maxSal不为null), 则：-->
    <!--    //       ... where salary < maxSal-->
    <!--    // 如果参数有 minSal、maxSal(即minSal、maxSal不为null), 则：-->
    <!--    //       ... where salary > minSal and salary < maxSal-->
    <select id="findBySal12" resultType="cn.tedu.pojo.Emp">
        select * from emp
        <where>
            <if test="minSal != null">
                and salary >= #{minSal}
            </if>
            <if test="maxSal != null">
                and salary &lt;= #{maxSal}
            </if>
        </where>
    </select>

    <!-- 练习14: 根据员工的id批量删除员工信息
	delete from emp where id in (1,3,5,7)
	collection: 如果传的参数仅仅是一个数组或者List集合, collection可以指定为
		array或list; 如果传的是多个参数，用map封装，collection则指定为map中的key
	open: 指定生成的SQL片段以什么符号开始
	close: 指定生成的SQL片段以什么符号结束
	item: 指定变量接收数组或集合中的元素
	separator: 指定一个间隔符, 在将数组或集合中的每个元素拼接到SQL片段之后,
		在后面拼接一个间隔符
 -->
    <delete id="testDeleteByIds14">
        delete from emp where id in
        <foreach collection="array" open="(" item="id" separator="," close=")">
            #{id}
        </foreach>
    </delete>
    <!-- 练习15: 根据员工的id批量更新员工信息
 	将id为 2、4、6、8的员工的薪资在原有基础上增加1000
 	update emp set salary=salary + 1000
	where id in(2,4,6,8);
-->
    <update id="testUpdateByIds15">
        update emp set salary=salary + #{sal}
        where id in
        <foreach collection="ids" open="(" item="id" separator="," close=")">
            #{id}
        </foreach>
    </update>
</mapper>
